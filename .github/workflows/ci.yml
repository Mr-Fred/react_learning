name: Todo App CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./todo-frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./todo-frontend
        run: npm test
  unit-test-backend:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build test image
        run: docker build --target test -t todo-backend-test:latest -f ./todo-backend/Dockerfile ./todo-backend

      - name: Run backend unit tests
        run: |
          docker run --rm \
            -e TEST_MONGODB_URI=${{ secrets.TEST_MONGODB_URI }} \
            -e SECRET=${{ secrets.SECRET }} \
            todo-backend-test:latest
        # The CMD ["npm", "test"] from the Dockerfile's 'test' stage is executed by default.

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    # This job depends on the unit tests passing first
    needs: unit-test-backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start services
        # This command builds the images if they don't exist and starts all services
        # in detached mode (-d). The environment variables from your docker-compose.yml
        # are used automatically.
        run: docker-compose up -d

      - name: Wait for services to be ready
        # A simple wait to allow the database to initialize.
        # For production pipelines, consider using a more robust solution like
        # docker-compose healthchecks or a dedicated wait-for-it script.
        run: |
          echo "Waiting for services to start..."
          sleep 20

      - name: Run backend integration tests
        # Use 'exec' to run a command inside a running container.
        # The -T flag disables pseudo-tty allocation, which is required for CI environments.
        run: docker-compose exec -T todo-backend npm test

      - name: Show logs on failure
        if: failure()
        run: docker-compose logs

      - name: Stop services
        # This 'if: always()' ensures that services are stopped even if the test step fails.
        if: always()
        run: docker-compose down
